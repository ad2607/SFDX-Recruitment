<!--
   @File Name          : UPRN_Map.page
   @Description        : 
   @Author             : ChangeMeIn@UserSettingsUnder.SFDoc
   @Group              : 
   @Last Modified By   : ChangeMeIn@UserSettingsUnder.SFDoc
   @Last Modified On   : 6/6/2020, 3:03:18 PM
   @Modification Log   : 
   Ver       Date            Author                 Modification
   1.0    4/14/2020   ChangeMeIn@UserSettingsUnder.SFDoc     Initial Version
   -->
   <apex:page controller="MapStream">
    <html lang="en">

    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"></script>
        <link href="//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet" />
        <style type="text/css">
        #map {
            width: 100%;
            height: 580px;
            background-color: black;
        }
        </style>
    </head>

    <body>
        <div id="map"></div>
        <script type="text/javascript">

        var recordId; 
        
        console.log('config', window.location.href);
        Visualforce.remoting.timeout = 120000; // Set timeout at page level
        // This remoting call will use the page's timeout value
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.MapStream.getCandidates}', window.location.href, function(result, event) {
            var bounds = [];

            if(result.VACANCY) {
                var vacancy = result.VACANCY[0];
                console.log('vacancy info', vacancy);
                recordId = vacancy.Id;
                
                var myIcon = L.icon({
                    iconUrl: 'my-icon.png',
                    iconSize: [38, 95],
                    iconAnchor: [22, 94],
                    popupAnchor: [-3, -76],
                    shadowUrl: 'my-icon-shadow.png',
                    shadowSize: [68, 95],
                    shadowAnchor: [22, 94]
                });
                
                var map = L.map('map').setView([vacancy.lat__c, vacancy.long__c], 9);
                
                var circle = L.circle([vacancy.lat__c, vacancy.long__c], {
                    color: "#af61c7",
                    fillColor: "#af61c7",
                    fillOpacity: 0.1,
                    radius: 24140
                }).addTo(map);
                
                var circle = L.circle([vacancy.lat__c, vacancy.long__c], {
                    color: "#6ca3eb",
                    fillColor: "#6ca3eb",
                    fillOpacity: 0.1,
                    radius: 50000
                }).addTo(map);

                var circleSmall = L.circle([vacancy.lat__c, vacancy.long__c], {
                    color: "#61c78f",
                    fillColor: "#61c78f",
                    fillOpacity: 1,
                    radius: 600
                }).addTo(map);
                
                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
                
                //L.marker([vacancy.Geolocation__Latitude__s, vacancy.Geolocation__Longitude__s], {color: 'green'}).addTo(map);
                
                bounds.push([vacancy.lat__c, vacancy.long__c]);
                console.log("at end");
            }
            if(result.CANDIDATES) {
                result.CANDIDATES.forEach(function(candidate) {
                    console.log('candidate', candidate);
                    var popupContent = '<b>' + candidate.Name + '</b><br/>';
                    if (candidate.PersonMobilePhone)                 popupContent += 'Mobile: ' + candidate.PersonMobilePhone + ' <br/><br/>';
                    if (candidate.PersonEmail)                 popupContent += 'Email: ' + candidate.PersonEmail + ' <br/><br/>';
                

                    L.marker([candidate.BillingLatitude, candidate.BillingLongitude], { opacity : 0.6}).addTo(map).bindPopup(popupContent);
                    bounds.push([candidate.BillingLatitude, candidate.BillingLongitude]);
                });
            }
            
 
        });
        
        function shortlist(candidateId, action){
    
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.MapStream.shortlist}', 
                candidateId, 
                recordId,
                action,
                function(result, event) {
                    if (result === 'success'){
                        window.location.reload();
                    };
                }
            );
        } 


  
        </script>
    </body>

    </html>
</apex:page>